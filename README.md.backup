# Simple Cave Generation for Roblox

A streamlined cave generation system that creates beautiful, natural-looking cave systems without floating rocks or disconnected segments. Designed for immediate good results with minimal configuration.

## üåü Key Features

- **Clean Cave Structures**: No floating rocks or disconnected segments
- **Simple API**: Easy to use with good defaults that just work
- **3D Density Field**: Creates naturally connected tunnels and chambers
- **Multi-Scale Noise**: Combines different scales for realistic cave structures
- **Connectivity Filtering**: Automatically removes isolated floating elements
- **Optimized Performance**: Efficient chunk-based processing with `Terrain:WriteVoxels`

## üìÅ File Structure

```
nlib/
‚îú‚îÄ‚îÄ NoiseLib.lua                    # Core noise generation library
‚îú‚îÄ‚îÄ ProceduralCaveGenerator.lua     # Main cave generation algorithm
‚îú‚îÄ‚îÄ CaveGenerationExample.lua       # Usage examples and demonstrations
‚îî‚îÄ‚îÄ README.md                       # This documentation
```

## üöÄ Quick Start

### Basic Usage

```lua
local ProceduralCaveGenerator = require(script.ProceduralCaveGenerator)

-- Define generation area
local region = Region3.new(Vector3.new(-128, -128, -128), Vector3.new(128, 0, 128))

-- Configure cave settings
local settings = {
    region = region,
    chunkSize = 64,
    resolution = 4,
    caveSettings = {
        threshold = 0.4,
        optimalDepth = -60,
        depthRange = 40,
        tunnelScale = 0.025,
        chamberScale = 0.06,
        connectivity = 0.8
    },
    generateFeatures = true,
    generateWaterFlow = true,
    generateEntrances = true
}

-- Generate cave system
local result = ProceduralCaveGenerator.generateCaveSystem(
    workspace.Terrain, 
    settings, 
    function(progress, stage, details)
        print(string.format("%s: %.1f%% - %s", stage, progress * 100, details))
    end
)

if result.success then
    print("‚úÖ Generated", result.totalCaves, "caves with", result.totalFeatures, "features")
else
    warn("‚ùå Generation failed:", result.error)
end
```

### Using Examples

```lua
local CaveExample = require(script.CaveGenerationExample)

-- Generate a small test cave
local result = CaveExample.generateSmallTestCave(workspace.Terrain, game.Players.LocalPlayer)

-- Generate a realistic cave network
local result = CaveExample.generateRealisticNetwork(workspace.Terrain, game.Players.LocalPlayer)

-- Generate lava caves
local result = CaveExample.generateLavaCaves(workspace.Terrain, game.Players.LocalPlayer)

-- Performance optimized generation
local result = CaveExample.generatePerformanceOptimized(workspace.Terrain, game.Players.LocalPlayer)
```

## üéõÔ∏è Configuration Options

### Cave Generation Settings

```lua
type CaveGenerationSettings = {
    -- Basic settings
    region: Region3,           -- Generation area
    chunkSize: number?,        -- Size of each chunk (default: 64)
    resolution: number?,       -- Studs per voxel (default: 4)
    
    -- NoiseLib settings
    caveSettings: {
        threshold: number?,         -- Cave air threshold (0.3-0.5)
        optimalDepth: number?,      -- Preferred cave depth (-60)
        depthRange: number?,        -- Depth variation range (40)
        tunnelScale: number?,       -- Main tunnel noise scale (0.02)
        chamberScale: number?,      -- Chamber noise scale (0.05)
        connectivity: number?,      -- Network connectivity (0.7)
        waterLevel: number?,        -- Water spawn level (-50)
        lavaLevel: number?,         -- Lava spawn level (-150)
        weightMainTunnels: number?, -- Tunnel weight (0.6)
        weightChambers: number?,    -- Chamber weight (0.3)
        weightVerticalShafts: number? -- Shaft weight (0.1)
    },
    
    -- Generation options
    generateFeatures: boolean?,     -- Enable stalactites, crystals, etc.
    generateWaterFlow: boolean?,    -- Enable water flow simulation
    generateEntrances: boolean?,    -- Enable surface entrance detection
    
    -- Performance settings
    enableProgressReporting: boolean?,    -- Enable progress callbacks
    enableDebugVisualization: boolean?,   -- Enable debug visualization
    memoryOptimized: boolean?             -- Enable memory optimizations
}
```

### Preset Configurations

```lua
-- Available presets
ProceduralCaveGenerator.Presets = {
    SMALL_TEST_CAVE,        -- 64x64x64 test cave
    REALISTIC_CAVE_SYSTEM,  -- 256x256x144 realistic network
    MASSIVE_CAVE_NETWORK,   -- 512x512x200 dense cave system
    PERFORMANCE_OPTIMIZED   -- 512x512x128 optimized for speed
}

-- Usage
local settings = ProceduralCaveGenerator.Presets.REALISTIC_CAVE_SYSTEM
local result = ProceduralCaveGenerator.generateCaveSystem(terrain, settings)
```

## üîß Algorithm Details

### Stage 1: Abstract Data Generation
- Instantiates NoiseLib generator with high-performance configuration
- Creates 3D cave grid at 4-stud resolution using `generateRealisticCaves`
- Combines multiple noise layers (tunnels, chambers, vertical shafts, details)
- Applies depth-based probability for realistic cave distribution

### Stage 2: Logical Structure Analysis
- Extracts air points from cave grid
- Uses `analyzeCaveNetworks` to find interconnected cave systems
- Uses `findCaveEntrances` to locate surface openings
- Applies `simulateWaterFlow` for realistic erosion patterns

### Stage 3: Terrain Voxel Preparation
- Divides region into optimized chunks
- Initializes materials and occupancies 3D arrays
- Populates based on cave data properties (isAir, contents, etc.)
- Handles different materials: rock, air, water, lava

### Stage 4: Voxel Data Rendering
- Single `Terrain:WriteVoxels` call per chunk for maximum performance
- Optimized chunk size and resolution for quality vs. performance balance
- Memory-efficient processing with automatic cleanup

### Stage 5: Detailed Feature Placement
- Iterates through air points calling `generateCaveFeatures`
- Renders geological formations based on feature types:
  - **Stalactites and stalagmites** using `Terrain:FillBlock`
  - **Crystal formations** with procedural colors using `Terrain:FillBall`
  - **Underground pools** using `Terrain:FillBall`
  - **Cave decorations** based on cave characteristics

## üéÆ Feature Types

### Geological Features
- **Stalactites** - Hanging rock formations from cave ceilings
- **Stalagmites** - Rising rock formations from cave floors  
- **Crystal Formations** - Colorful crystal clusters with procedural colors
- **Underground Pools** - Water-filled cave chambers
- **Cave Decorations** - Additional atmospheric elements

### Water Flow Features
- **Flow Paths** - Realistic water flow simulation from sources to destinations
- **Erosion Patterns** - Cave modification based on water flow
- **Water Sources** - Higher elevation caves that generate flow
- **Flow Visualization** - Debug lines showing water movement

### Cave Network Features
- **Interconnected Systems** - Connected cave networks with accurate pathfinding
- **Surface Entrances** - Natural openings to the surface
- **Network Analysis** - Grouping of related cave systems
- **Connectivity Control** - Adjustable connection density

## üìä Performance Optimization

### Memory Management
- Automatic memory cleanup and garbage collection
- Configurable cache sizes and cleanup thresholds
- Memory usage estimation tools
- Chunk-based processing to limit memory usage

### Processing Optimization
- Configurable yield intervals to prevent timeouts
- Asynchronous generation with progress reporting
- Performance profiling and statistics
- Optimized noise function caching

### Quality vs Performance
```lua
-- High Quality (slower)
settings.resolution = 2        -- Higher resolution
settings.chunkSize = 32       -- Smaller chunks
settings.generateFeatures = true

-- High Performance (faster)
settings.resolution = 8        -- Lower resolution
settings.chunkSize = 128      -- Larger chunks
settings.generateFeatures = false
```

## üõ†Ô∏è Debug Tools

### Visualization
```lua
-- Generate debug visualization
local viz = ProceduralCaveGenerator.generateDebugVisualization(result)
CaveExample.createDebugVisualization(viz)
```

### Performance Analysis
```lua
-- Get performance statistics
local stats = generator:getPerformanceStats()
print("Cache Hit Rate:", stats.cacheStats.hits / (stats.cacheStats.hits + stats.cacheStats.misses))
print("Peak Memory:", stats.peakMemoryUsage, "KB")
print("Avg Execution Time:", stats.averageExecutionTime, "ms")
```

### Benchmarking
```lua
-- Run comprehensive benchmarks
local benchmarks = CaveExample.benchmarkGeneration(workspace.Terrain)
for testName, time in pairs(benchmarks) do
    print(testName, ":", time, "seconds")
end
```

## üìà Usage Examples

### Small Test Cave (Development)
```lua
local settings = {
    region = Region3.new(Vector3.new(-64, -96, -64), Vector3.new(64, -16, 64)),
    chunkSize = 32,
    resolution = 4,
    caveSettings = {
        threshold = 0.4,
        optimalDepth = -60,
        connectivity = 0.8
    },
    generateFeatures = true
}
```

### Large Cave Network (Production)
```lua
local settings = {
    region = Region3.new(Vector3.new(-256, -160, -256), Vector3.new(256, -16, 256)),
    chunkSize = 64,
    resolution = 4,
    caveSettings = {
        threshold = 0.35,
        optimalDepth = -80,
        depthRange = 50,
        connectivity = 0.7
    },
    generateFeatures = true,
    generateWaterFlow = true,
    generateEntrances = true
}
```

### Performance Optimized (Large Worlds)
```lua
local settings = {
    region = Region3.new(Vector3.new(-512, -128, -512), Vector3.new(512, 0, 512)),
    chunkSize = 128,
    resolution = 8,  -- Lower resolution
    caveSettings = {
        threshold = 0.4,
        connectivity = 0.5
    },
    generateFeatures = false,  -- Disable for performance
    generateWaterFlow = false,
    memoryOptimized = true
}
```

## ‚ö†Ô∏è Best Practices

### Performance Guidelines
1. **Start small** - Test with small regions first
2. **Monitor memory** - Use memory estimation tools
3. **Adjust resolution** - Lower resolution for larger areas
4. **Disable features** - Turn off features for performance-critical scenarios
5. **Use chunks** - Optimal chunk size is 64-128 studs

### Quality Guidelines
1. **Cave threshold** - 0.3-0.5 range for good cave density
2. **Optimal depth** - -60 to -80 for realistic underground caves
3. **Connectivity** - 0.6-0.8 for good cave networks
4. **Feature balance** - Enable all features for maximum realism

### Error Handling
```lua
-- Always check results
if not result.success then
    warn("Generation failed:", result.error)
    return
end

-- Validate settings before generation
if not ProceduralCaveGenerator.validateSettings(settings) then
    warn("Invalid settings")
    return
end

-- Estimate memory usage
local estimatedMemory = ProceduralCaveGenerator.estimateMemoryUsage(settings)
if estimatedMemory > 100 * 1024 * 1024 then  -- 100MB
    warn("Memory usage may be too high:", estimatedMemory / 1024 / 1024, "MB")
end
```

## ü§ù Contributing

This cave generation system is built on top of the powerful NoiseLib module. When contributing:

1. Maintain compatibility with NoiseLib's API
2. Follow the 5-stage algorithm structure
3. Include comprehensive error handling
4. Add performance optimizations where possible
5. Include examples and documentation

## üìÑ License

This project builds upon the NoiseLib module. Please refer to the original NoiseLib license for usage terms.